# Production-optimized Dockerfile for TWOEM Online Productions
# This version handles lockfile issues and optimizes for deployment

# Multi-stage build for TWOEM Online Productions

# Backend Stage
FROM python:3.11-slim as backend

WORKDIR /app/backend

# Install system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    && rm -rf /var/lib/apt/lists/*

# Copy backend requirements and install dependencies
COPY backend/requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy backend source code
COPY backend/ .

# Frontend Stage
FROM node:20-alpine as frontend-build

WORKDIR /app/frontend

# Copy package.json first for better caching
COPY frontend/package.json ./

# Install dependencies without lockfile constraints for production flexibility
RUN yarn install --production=false

# Copy frontend source code
COPY frontend/ .

# Build frontend for production
RUN yarn build

# Final production stage
FROM python:3.11-slim

WORKDIR /app

# Install system dependencies including nginx for serving static files
RUN apt-get update && apt-get install -y \
    gcc \
    nginx \
    && rm -rf /var/lib/apt/lists/*

# Copy backend from backend stage
COPY --from=backend /app/backend /app/backend
COPY --from=backend /usr/local/lib/python3.11/site-packages /usr/local/lib/python3.11/site-packages
COPY --from=backend /usr/local/bin /usr/local/bin

# Copy frontend build from frontend stage
COPY --from=frontend-build /app/frontend/build /app/frontend/build

# Copy configuration files
COPY nginx.conf /etc/nginx/nginx.conf
COPY start-production.sh /app/
RUN chmod +x /app/start-production.sh

# Create nginx directories
RUN mkdir -p /var/log/nginx /var/lib/nginx

# Expose port
EXPOSE 8000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=60s --retries=3 \
  CMD curl -f http://localhost:8000/api/health || exit 1

# Start the application
CMD ["/app/start-production.sh"]